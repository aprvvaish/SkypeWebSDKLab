angular.module("skype.services", [])
.factory("skypeSvc", ["$rootScope", "$http", "$q", function($rootScope, $http, $q) {
    var skypeSvc = {};
    
    //private properties
    var apiManager = null;
    var client = null;
    
    //config settings for the app
    skypeSvc.config = {
        apiKey: "a42fcebd-5b43-4b89-a065-74450fb91255", // SDK DF
        apiKeyCC: "9c967f6b-a846-4df2-b43d-5167e47d81e1", // SDK+CC DF
        initParams: {
            auth: null,
            client_id: "6fd45769-7a1e-4dc5-a876-90fa781b3d3e", //Client ID of app in Azure AD
            cors: true,
            origins: ["https://webdir.online.lync.com/autodiscover/autodiscoverservice.svc/root"],
            redirect_uri: "/auth.html",
            version: "sdk-samples/1.0.0" // this helps to identify telemetry generated by the samples
        }
    };
    
    //ensures the skype client object is initialized
    var ensureClient = function() {
        var deferred = $q.defer();
        
        if (client != null)
            deferred.resolve();
        else {
            Skype.initialize({
                apiKey: skypeSvc.config.apiKeyCC
            }, function (api) {
                apiManager = api;
                client = apiManager.UIApplicationInstance;
                client.signInManager.state.changed(function (state) {
                    $rootScope.$broadcast("stateChanged", state);
                });
                deferred.resolve();
            }, function (er) {
                deferred.resolve(er);
            });
        }
        
        return deferred.promise;
    };
    
    //signs into skype
    skypeSvc.ensureSignIn = function() {
        var deferred = $q.defer();
        
        ensureClient().then(function() {
            //determine if the user is already signed in or not
            if (client.signInManager.state() == "SignedOut") {
                client.signInManager.signIn(skypeSvc.config.initParams).then(function (z) {
                    //listen for status changes
                    client.personsAndGroupsManager.mePerson.status.changed(function (newStatus) {
                        console.log("logged in status: " + newStatus);                
                    });
                    
                    //In the future we can listen for new "inbound" conversations like this
                    client.conversationsManager.conversations.added(function (conversation) { });

                    //resolve the promise
                    deferred.resolve();
                }, function (er) {
                    deferred.reject(er);
                });
            }
            else {
                //resolve the promise
                deferred.resolve();
            }
        }, function(er) {
            deferred.reject(er);
        });
        
        return deferred.promise;
    }
    
    
    //subscribes to the status of a user
    var userSubs = [];
    skypeSvc.subscribeToStatus = function(id) {
        var deferred = $q.defer();
        
        //query for the user by their id
        var query = client.personsAndGroupsManager.createPersonSearchQuery();
        query.text(id);
        query.limit(1);
        query.getMore().then(function (items) {
            //ensure results came back
            if (items.length > 0)
            {
                //assume the first match is the user
                var person = items[0].result;
                person.status.get().then(function (s) {
                    deferred.resolve(s);
                });
                
                //check if we have already subscribed to this user
                var subMatch = null;
                for (var i = 0; i < userSubs.length; i++) {
                    if (userSubs[i].id === id) {
                        subMatch = userSubs[i];
                        break;
                    }
                }
                if (!subMatch) {
                    //no subscription exists for this user, so create one
                    userSubs.push({ id: id, person: person });
                    
                    //listen for status changes
                    person.status.changed(function(s) {
                        //broadcast the status change to listeners
                        $rootScope.$broadcast("statusChanged", { user: person, status: s });
                    });
                
                    //subscribe to the status changes
                    person.status.subscribe();
                }
            }
            else
                deferred.reject("No matches found");
        });
        
        return deferred.promise;  
    };
    
    //start a conversation with a user
    skypeSvc.startConversation = function(sip) {
        //hide all containers
        var containers = document.getElementById("chatWindowInner").children;
        for (var i = 0; i < containers.length; i++) {
            containers[i].style.display = "none";
        }
        
        var chatSip = sip;
        var uris = [chatSip];
        var container = document.getElementById(chatSip);
        if (!container) {
            //this is a new conversation...create the window
            container = document.createElement("div");
            container.id = chatSip;
            document.getElementById("chatWindowInner").appendChild(container);
            var promise = apiManager.renderConversation(container, { modalities: ["Chat"], participants: uris });
        }
        else
            container.style.display = "block";
    };
    
    return skypeSvc;
}]);